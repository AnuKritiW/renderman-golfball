// dimples.osl
/*
    Pattern Shader: Dimple Displacement Amount Calculator
    -----------------------------------------------------
    This shader computes the scalar displacement amount (`dispAmount`) for each point
    on a sphere based on proximity to procedural dimple centers.

    Use this output as input to PxrDisplace in a RenderMan RIS setup.
*/
#include "dimple_centers.oslinclude"

shader dimples(
    float dimple_radius = 0.105,
    float dimple_depth = 0.2,
    int numDimples = 377,
    output float dispAmount = 0.0,
    output color shadowTint = color(1.0))
{
    // vector pos = normalize(vector(P));  // unit sphere
    vector pos = normalize(transform("object", P));

    // Track the closest dimple within the radius
    float minAngle = dimple_radius;
    float bestFalloff = 0.0;

    for (int i = 0; i < numDimples; ++i)
    {
        point center = get_dimple_center(i);
        float angle = acos(dot(pos, normalize(vector(center))));

        if (angle < minAngle)
        {
            minAngle = angle;
            // float t = clamp(angle / dimple_radius, 0.0, 1.0);
            // float falloff = pow(1.0 - t, 4); // Exponential falloff for sharper edges
            float falloff = 1.0 - smoothstep(0.0, dimple_radius, angle);
            bestFalloff = falloff;
        }
    }

    dispAmount -= bestFalloff * dimple_depth;

    // Shadow effect: darken color by 0.3Ã— at dimple centers
    float shadowAmount = 1.0 - 0.3 * bestFalloff;

    color baseColor = color(0.95, 0.27, 0.6);
    shadowTint = color(shadowAmount) * baseColor;  // Uniformly darken RGB channels
}